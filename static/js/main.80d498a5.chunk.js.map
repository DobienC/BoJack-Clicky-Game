{"version":3,"sources":["logo.svg","components/pieces/NavBar.js","components/pieces/Banner.js","components/pieces/Image.js","components/pieces/Board.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","props","react_default","a","createElement","class","className","href","score","highScore","Banner","Image","src","img","onClick","click","id","Board","icons","map","item","pieces_Image","handleButtonClick","image","GameContainer","state","Characters","group","event","_this","indexOf","target","setState","push","sort","Math","random","pieces_NavBar","this","pieces_Banner","pieces_Board","Component","App","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g5BAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mLCqBzBC,MAnBf,SAAgBC,GACZ,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iDACPH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,KAAR,iBAERL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,uCAEJF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,mBAAWH,EAAMO,MAAjB,kBAAuCP,EAAMQ,eCH9CC,MARf,SAAgBT,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wCCMGO,MATf,SAAeV,GAEX,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,IAAKC,QAASb,EAAMc,MAAOC,GAAIf,EAAMe,OCQlDC,MAXf,SAAehB,GAEX,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACVL,EAAMiB,MAAMC,IAAI,SAACC,GAAD,OAAUlB,EAAAC,EAAAC,cAACiB,EAAD,CAAOL,GAAII,EAAKJ,GAAID,MAAOd,EAAMqB,kBAAmBT,IAAKO,EAAKG,oBCiC1FC,6MAlCXC,MAAQ,CACJjB,MAAO,EACPC,UAAW,EACXS,MAAOQ,EACPC,MAAO,MAGXL,kBAAoB,SAAAM,IACgC,IAA7CC,EAAKJ,MAAME,MAAMG,QAAQF,EAAMG,OAAOf,KACrCa,EAAKG,SAAS,CAACxB,MAAOqB,EAAKJ,MAAMjB,MAAQ,IACtCqB,EAAKJ,MAAMhB,WAAaoB,EAAKJ,MAAMjB,OAClCqB,EAAKG,SAAS,CAACvB,UAAWoB,EAAKJ,MAAMjB,MAAQ,IAEjDqB,EAAKJ,MAAME,MAAMM,KAAKL,EAAMG,OAAOf,MAEnCa,EAAKG,SAAS,CAACxB,MAAO,IACtBqB,EAAKG,SAAS,CAACL,MAAO,MAE1BE,EAAKG,SAAS,CACVd,MAAOW,EAAKJ,MAAMP,MAAMgB,KAAK,kBAAMC,KAAKC,SAAW,gFAKvD,OACIlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiC,EAAD,CAAQ7B,MAAO8B,KAAKb,MAAMjB,MAAOC,UAAW6B,KAAKb,MAAMhB,YACvDP,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,CAAOtB,MAAOoB,KAAKb,MAAMP,MAAOI,kBAAmBgB,KAAKhB,4BA7B5CmB,aCsBbC,MAtBf,WACE,OACExC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACuC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80d498a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n    <div>\r\n        <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"col-lg-4\">\r\n                <h1><a href=\"#\">Clicky Game</a></h1>\r\n            </div>\r\n            <div className=\"col-lg-4\">\r\n                <h1>Click an image to start!</h1>\r\n            </div>\r\n            <div className=\"col-lg-4\">\r\n                <h2>Score {props.score} | High Score: {props.highScore}</h2>\r\n            </div>\r\n        </nav>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\n\r\nfunction Banner(props) {\r\n    return (\r\n        <div>\r\n            <h1>This is my Clicking Game</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\n\r\nfunction Image(props){\r\n\r\n    return (\r\n        <div className=\"col-lg-3\">\r\n            <img src={props.img} onClick={props.click} id={props.id}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport Image from './Image';\r\n\r\nfunction Board(props) {\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {props.icons.map((item) => <Image id={item.id} click={props.handleButtonClick} img={item.image} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import React, {Component } from 'react';\r\nimport NavBar from './pieces/NavBar';\r\nimport Banner from './pieces/Banner';\r\nimport Board from './pieces/Board';\r\nimport Characters from '../characters.json';\r\n\r\nclass GameContainer extends Component {\r\n    state = {\r\n        score: 0,\r\n        highScore: 0,\r\n        icons: Characters,\r\n        group: []\r\n    };\r\n\r\n    handleButtonClick = event => {\r\n        if(this.state.group.indexOf(event.target.id)===-1){\r\n            this.setState({score: this.state.score + 1});\r\n            if(this.state.highScore <= this.state.score){\r\n                this.setState({highScore: this.state.score + 1});\r\n            }\r\n            this.state.group.push(event.target.id);\r\n        } else {\r\n            this.setState({score: 0});\r\n            this.setState({group: []});\r\n        }\r\n        this.setState({\r\n            icons: this.state.icons.sort(() => Math.random() - 0.5)\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <NavBar score={this.state.score} highScore={this.state.highScore}/>\r\n                <Banner />\r\n                <Board icons={this.state.icons} handleButtonClick={this.handleButtonClick}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameContainer from './components/GameContainer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameContainer />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}